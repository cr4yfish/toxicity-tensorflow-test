import Head from 'next/head'
import { Container, Input, Card, Button, Badge, Collapse, Progress, Text, Spacer, Textarea } from "@nextui-org/react";
import * as React from "react";
import Link from "next/link"

// import github icon from react icons
import { FaGithub } from 'react-icons/fa';

export default function Home() {

  const [results, setResults] = React.useState({});
  const [sentence, setSentence] = React.useState("");
  const [states, setStates] = React.useState({
    identity_attack: {state: false, label: "identity_attack"},
    insult: {state: false, label: "insult"},
    obscene: {state: false, label: "obscene"},
    severe_toxicity: {state: false, label: "severe_toxicity"},
    sexual_explicit: {state: false, label: "sexual_explicit"},
    threat: {state: false, label: "threat"},
    toxicity: {state: false, label: "toxicity"},
  });

  React.useEffect(() => {
    console.log(states)
  }, [states]);

  const classify = async () => {
    console.log("New classify request", sentence);
    try {
      const res = await fetch("/api/classify", { 
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ 
          sentence: sentence 
        })
      });
      const json = await res.json();
      setResults(Array.from(json));

      // Go through each result and set the state of the checkbox
      json.forEach(result => {
        setStates({
          ...prevStates,
          [result.label]: {state: result.results[0].match, label: result.label}
        });
      });

    } catch (e) { console.log(e);}
  }

  return (
    <Container style={{ margin: 20 }}>
      <Head>
        <title>Insult Checker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>

        <Text h1>Insult Checker</Text>
        <Link href="https://github.com/tensorflow/tfjs-models/tree/master/toxicity">
          <a><Button style={{ margin: 0, width: "100%" }} auto color="secondary" ghost icon={<FaGithub />}>Source</Button></a>
        </Link>
  
  

        <Container style={{ marginTop: 40, marginBottom: 20, paddingLeft: 0, display: "flex", gap: 5, flexDirection: "column" }}>

        <Textarea status="secondary" label="Sentence" placeholder='Some Text containing things' value={sentence} onChange={(e) => setSentence(e.target.value)} />
        
        <Button style={{ marginTop: 10 }} flat onClick={() => sentence.length != 0 ? classify() : null}>Classify</Button>
        </Container>

        {Object.keys(results).map(index => (
          <Badge color={results[index].results[0].probabilities["1"] > 0.66 ? "success" : "error"} key={index} >{results[index].label}</Badge>
        ))}

        {Object.keys(results).map(index => (
          <>
            <Text label >{results[index].label}</Text>
            <Progress shadow striped squared status={results[index].results[0].probabilities["1"] > 0.66 ? "success" : "error"} color={results[index].results[0].probabilities["1"] > 0.66 ? "success" : "error"} value={results[index].results[0].probabilities["1"]*100} />
            <Spacer y={.5} />
          </>
        ))}

        {
          results.length > 1 ? (
            <>

            <Collapse.Group>
              <Collapse title="Open complete object" >
                <pre>{JSON.stringify(results, null, 2)}</pre>
              </Collapse>
            </Collapse.Group>

            </>
       
          ) : null
        }

        
      </Container>

    </Container>
  )
}
